/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkalurageek"] = self["webpackChunkalurageek"] || []).push([["src_components_login_login_js"],{

/***/ "./src/components/login/login.js":
/*!***************************************!*\
  !*** ./src/components/login/login.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _observables_users_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../observables/users.js */ \"./src/observables/users.js\");\n\r\n\r\nclass Login extends HTMLElement{\r\n\r\n    constructor(){\r\n        super()\r\n    }\r\n\r\n    connectedCallback(){\r\n        this.render()\r\n        this.handleLogin()\r\n    }\r\n\r\n    render(){\r\n        this.innerHTML = ` \r\n            <div class=\"login__container\" id=\"login-container\">\r\n                <h2 class=\"login__title\">Iniciar Sesión</h2>\r\n                <div class=\"login__form__container\">\r\n                    <form method=\"get\" class=\"login__form\" id=\"login-form\">\r\n                        <div class=\"login__inputs__container\">\r\n                            <input id=\"login-user-email\" class=\"login__input\" type=\"text\" placeholder=\"Escriba su nombre de usuario o correo electronico\" required>\r\n                            <input id=\"login-password\" class=\"login__input\" type=\"password\" placeholder=\"Escriba su contraseña\" required>\r\n                        </div>\r\n                        <div class=\"login__btn__container\">\r\n                            <button class=\"login__btn\" type=\"submit\">Entrar</button>\r\n                        </div>\r\n                    </form>\r\n                    <span id=\"user-info\" class=\"login__error\"></span>\r\n                </div>\r\n            </div>\r\n        `\r\n    }\r\n\r\n    async handleLogin(){\r\n        const form = this.querySelector(\"#login-form\")\r\n\r\n        form.addEventListener(\"submit\", async (event) => {\r\n            event.preventDefault()\r\n            const inputUser = this.querySelector(\"#login-user-email\").value\r\n            const password = this.querySelector(\"#login-password\").value\r\n\r\n            try {\r\n                const res = await _observables_users_js__WEBPACK_IMPORTED_MODULE_0__.user.login(inputUser, password)\r\n                const container = this.querySelector(\"#login-container\")\r\n                container.innerHTML = `\r\n                        <h2 class=\"login__title\">${res}</h2>\r\n                        <loader-component></loader-component>\r\n                    `\r\n                setTimeout(() => {\r\n                    window.location.href = \"#\";\r\n                }, 1000);\r\n            } catch (error) {\r\n                const info = this.querySelector(\"#user-info\")\r\n                info.innerHTML = `\r\n                    <i class=\"material-icons\">error</i> ${error}\r\n                `\r\n            }\r\n        })\r\n    }\r\n\r\n}\r\n\r\ncustomElements.define(\"login-form\", Login)\n\n//# sourceURL=webpack://alurageek/./src/components/login/login.js?");

/***/ }),

/***/ "./src/observables/users.js":
/*!**********************************!*\
  !*** ./src/observables/users.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   user: () => (/* binding */ user)\n/* harmony export */ });\n/* harmony import */ var _helpers_fetch_fetch_get_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/fetch/fetch.get.js */ \"./src/helpers/fetch/fetch.get.js\");\n/* harmony import */ var _helpers_fetch_fetch_post_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/fetch/fetch.post.js */ \"./src/helpers/fetch/fetch.post.js\");\n/* harmony import */ var _helpers_subject_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/subject.js */ \"./src/helpers/subject.js\");\n/* harmony import */ var _state_state_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../state/state.js */ \"./src/state/state.js\");\n\r\n\r\n\r\n\r\nconst bcrypt = __webpack_require__(/*! bcryptjs */ \"./node_modules/bcryptjs/dist/bcrypt.js\");\r\nconst { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"./node_modules/uuid/dist/commonjs-browser/index.js\");\r\n\r\nclass Users extends _helpers_subject_js__WEBPACK_IMPORTED_MODULE_2__.Subject{\r\n\r\n    constructor(){\r\n        super()\r\n    }\r\n\r\n    notify(user){\r\n        super.notify(user)\r\n    }\r\n\r\n    async login(inputUser, password){\r\n        return new Promise( async (resolve, reject) => {\r\n            try {\r\n                const users = await (0,_helpers_fetch_fetch_get_js__WEBPACK_IMPORTED_MODULE_0__.fetchGet)(\"http://localhost:3000/users\")\r\n                let userFound = false;\r\n\r\n                if(!users){\r\n                    // este mensaje se manda al catch\r\n                    throw (\"Debido a un problema de conectividad, no es posible iniciar sesión.\");\r\n                }\r\n\r\n                for(const user of users){\r\n                    if(inputUser === user.name || inputUser === user.email){\r\n                        const hashedPassword = user.password;\r\n                        try {\r\n                            await this.verifyPassword(password, hashedPassword)\r\n    \r\n                            const {email, id, name, role} = user\r\n                            const userLogged = {\r\n                                email: email, \r\n                                id: id, \r\n                                user: name, \r\n                                role: role\r\n                            }\r\n                            _state_state_js__WEBPACK_IMPORTED_MODULE_3__.state.user = userLogged\r\n                            this.notify(userLogged)\r\n                            userFound = true\r\n                            resolve(\"Haz iniciado sesión exitosamente.\")\r\n                            break\r\n                        } catch (error) {\r\n                            reject(error)\r\n                            return\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if(!userFound) {\r\n                    // este mensaje se manda al catch\r\n                    throw (\"El usuario no existe\");\r\n                }\r\n\r\n            } catch (error) {\r\n                // el \"error\" se manda al componente y renderiza los mensajes de error.\r\n                reject(error)\r\n            }\r\n        })\r\n    }\r\n\r\n    async verifyPassword(password, hash){\r\n        try {\r\n            const result = await bcrypt.compare(password, hash)\r\n            if(result){\r\n                return 'La contraseña es válida'\r\n            } else {\r\n                throw ('La contraseña es inválida')\r\n            }\r\n        } catch (error) {\r\n            throw error\r\n        }\r\n    }\r\n\r\n    async register(email, username, password){\r\n        try {\r\n            const newUser = {\r\n                name: username,\r\n                email: email,\r\n                password: await this.encryptPassword(password),\r\n                role: \"user\",\r\n                id: uuidv4()\r\n            }\r\n\r\n            const verify = await this.verifyNewUser(newUser)\r\n            if(verify.valueExists){\r\n                throw \"El usuario o email ingresado ya existe.\"\r\n            }\r\n            const res = await (0,_helpers_fetch_fetch_post_js__WEBPACK_IMPORTED_MODULE_1__.fetchPost)(\"http://localhost:3000/users\", newUser)\r\n            return \"Usuario creado exitosamente.\"\r\n\r\n        } catch (error) {   \r\n            throw error\r\n        }\r\n    }\r\n\r\n    encryptPassword(password){\r\n        return new Promise((resolve, reject) => {\r\n            bcrypt.genSalt(10, (error, salt) => {\r\n                bcrypt.hash(password, salt, (error, hash) => {\r\n                    if(error){\r\n                        reject(error)\r\n                    } else {\r\n                        resolve(hash)\r\n                    }\r\n                })\r\n            }) \r\n        })\r\n\r\n    }\r\n\r\n    verifyNewUser(newUser){\r\n        return new Promise((resolve, reject) => {\r\n            // Creo una copia de newUser para no borrar password y role del newUser original\r\n            const propsToEmit = [\"password\", \"role\"]\r\n            const newUserObject = { ...newUser } // Crear una copia independiente del objeto newUser\r\n            propsToEmit.forEach(prop => delete newUserObject[prop]) // recorro el array con las key que quiero eliminar\r\n\r\n            fetch(\"http://localhost:3000/users\")\r\n            .then(res => res.json())\r\n            .then(users => {\r\n\r\n                const arrayValuesNewUser = Object.values(newUserObject) // devuelve una array de valores de un objeto dado\r\n\r\n                let valueExists = false;\r\n                let matchingValues = []; // almacena todas las coincidencias\r\n                users.forEach(element => {\r\n                    const arrayValueElement = Object.values(element)\r\n                    // se está utilizando la función some() junto con includes() para verificar si al menos un valor de arrayValuesNewUser (los valores del objeto newUser) está presente en arrayValueElement (los valores del objeto element, que es cada user de la db).\r\n                    // some() itera sobre los elementos del array arrayValuesNewUser y devuelve true si al menos uno de los elementos cumple con la condición especificada en la función de callback. De lo contrario, devuelve false.\r\n                    arrayValuesNewUser.forEach(value => {\r\n                        if(arrayValueElement.includes(value)){\r\n                            matchingValues.push(value)\r\n                            valueExists = true;\r\n                        }\r\n                    })\r\n                });\r\n                resolve({ valueExists, matchingValues });\r\n            })\r\n            .catch(error => reject(error))\r\n        })\r\n\r\n    }\r\n\r\n    logout(){\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                _state_state_js__WEBPACK_IMPORTED_MODULE_3__.state.user = \"\"\r\n                this.notify()\r\n                resolve()\r\n            } catch (error) {\r\n                reject(error)\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n}\r\n\r\nconst user = new Users()\n\n//# sourceURL=webpack://alurageek/./src/observables/users.js?");

/***/ }),

/***/ "?86c1":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://alurageek/crypto_(ignored)?");

/***/ })

}]);